<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.5.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.hoggen</groupId>
	<artifactId>sublimation_customer</artifactId>
	<version>1.0.0</version>
	<packaging>war</packaging>
	<name>ROOT</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		<mapstruct.version>1.3.0.Final</mapstruct.version>
		<lombok-maven-plugin.version>1.18.8.1</lombok-maven-plugin.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>hoggen</groupId>
			<artifactId>sublimation_api</artifactId>
			<version>1.1.6</version>
		</dependency>
		<!--七牛云 服务-->
		<dependency>
			<groupId>com.qiniu</groupId>
			<artifactId>qiniu-java-sdk</artifactId>
			<version>7.2.28</version>
		</dependency>
	<!--七牛云服务-->
		<!-- 2.数据库驱动 -->
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

		<!-- 日志相关 -->
		<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<!--token -->
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>3.3.0</version>
		</dependency>

		<!--token -->

		<!--定时任务调度器 -->
		<dependency>
			<groupId>com.xuxueli</groupId>
			<artifactId>xxl-job-core</artifactId>
			<version>2.2.0</version>
		</dependency>
		<!--定时任务调度器 -->

		<!--    验证码-->
		<!-- https://mvnrepository.com/artifact/com.github.penggle/kaptcha -->
		<dependency>
			<groupId>com.github.penggle</groupId>
			<artifactId>kaptcha</artifactId>
			<version>2.3.2</version>
		</dependency>
		<dependency>
			<groupId>com.jhlabs</groupId>
			<artifactId>filters</artifactId>
			<version>2.0.235</version>
		</dependency>
		<!--    验证码-->

		<!--引入dubbo-->
		<dependency>
			<groupId>com.gitee.reger</groupId>
			<artifactId>spring-boot-starter-dubbo</artifactId>
			<version>1.1.0</version>
		</dependency>
		<!-- zookeeper客户端-->
		<dependency>
			<groupId>com.101tec</groupId>
			<artifactId>zkclient</artifactId>
			<version>0.3</version>
		</dependency>
		<!--引入dubbo-->

		<!--Java 实体映射工具 MapStruct-->
		<!--	在一个成熟的工程中，尤其是现在的分布式系统中，应用与应用之间，还有单独的应用细分模块之后，
		DO 一般不会让外部依赖，这时候需要在提供对外接口的模块里放 DTO 用于对象传输，
		也即是 DO 对象对内，DTO对象对外，DTO 可以根据业务需要变更，并不需要映射 DO 的全部属性	-->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<!--Java 实体映射工具 MapStruct-->


		<!-- quartz -->
<!--		<dependency>-->
<!--			<groupId>org.quartz-scheduler</groupId>-->
<!--			<artifactId>quartz</artifactId>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>org.springframework</groupId>-->
<!--			<artifactId>spring-context-support</artifactId>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>org.springframework</groupId>-->
<!--			<artifactId>spring-tx</artifactId>-->
<!--		</dependency>-->

		<!-- quartz -->


		<!--链接池-->
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>
		<!-- DAO: MyBatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.1</version>
		</dependency>


		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>

		<!--redis-->
		<!--redis依赖-->

		<!--<dependency>-->
			<!--<groupId>org.springframework.boot</groupId>-->
			<!--<artifactId>spring-boot-starter-data-redis</artifactId>-->
		<!--</dependency>-->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.jfinal/jfinal -->
		<dependency>
			<groupId>com.jfinal</groupId>
			<artifactId>jfinal</artifactId>
			<version>3.0</version>
		</dependency>


		<!--redis-->

		<!--热部署-->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-devtools</artifactId>-->
<!--			<optional>true</optional>-->

<!--		</dependency>-->




		<!-- netty 框架-->
		<!-- https://mvnrepository.com/artifact/io.netty/netty-all -->
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>4.1.42.Final</version>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>io.netty</groupId>-->
			<!--<artifactId>netty</artifactId>-->
			<!--<version>3.10.6.Final</version>-->
		<!--</dependency>-->

		<!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.5.1</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.protobuf-java-format</groupId>
			<artifactId>protobuf-java-format</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.alibaba/fastjson Json工具-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.58</version>
		</dependency>

		<!--引入swagger，自动文档生成-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
		</dependency>
		<!--引入swagger-->


		<!--它是一个工具类库，可以用简单的注解形式来简化代码，提高开发效率。-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<!--它是一个工具类库，可以用简单的注解形式来简化代码，提高开发效率。-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!--<configuration>-->
					<!--&lt;!&ndash;如果没有该项配置 spring-boot-devtools不会起作用&ndash;&gt;-->
					<!--<fork>-->
						<!--true-->
					<!--</fork>-->
				<!--</configuration>-->

			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<!--自动生成方法的插件-->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-maven-plugin</artifactId>
							<version>${lombok-maven-plugin.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>


		</plugins>
	</build>

</project>
